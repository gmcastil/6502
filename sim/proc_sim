#!/usr/bin/env bash

# High level simulation script for the MOS 6502 processor
#
# To run a simulation, run this script and provide the desired addressing mode
# to be simulated:
#
# $ ./proc_sim absolute
#
# This will run the 'absolute_tb.v' from /testbench with the absolute.asm from
# /roms. A number of interim steps used to be required (e.g., building a
# block memory, assembling source code into .mif files). These are no longer
# necessary as the simulation scripts are now sophisticated enough to automate
# all of that, rather than relying on the user to do it correctly.

set -o errexit
set -o nounset
set -o pipefail
IFS='$ \n\t'

# Verify that the simulation script is being run from the /sim directory
# otherwise exit.
full_pwd="$(readlink -f "$(pwd)")"
if [[ "$(basename "$full_pwd")" == "sim" ]]; then
    root_dir="$(dirname "$full_pwd")"
else
    echo "ERROR: Simulation script must be run from the /sim directory."
    exit 1
fi

# Check usage and verify that a mode or test case was actually provided
if [[ "$#" -eq 0 ]]; then
    echo "Usage: proc_sim [TEST_CASE]"
    exit 1
fi

# Names needed for working with Xilinx block memory IP
memory_ip="memory_block"
memory_model="blk_mem_gen_v8_3.v"

# Set up commonly used variables and locations
scripts_dir="$root_dir/scripts"
build_dir="$root_dir/build"
roms_dir="$root_dir/roms"
memory_dir="$build_dir/$memory_ip"

# Temporary directories
tmp_dir="/tmp"
sim_dir="$tmp_dir/proc_sim"

# Export important variables so the EDA tools can be found
export QUESTA_PATH="/opt/Altera/intelFPGA_pro/17.0/modelsim_ase/linux"
export XILINX_VIVADO="/opt/Xilinx/Vivado/2017.1"

# Supported addressing modes and test cases - should correspond to the names of
# testbenches, ROMs, and Tcl scripts to run for each/
supported=( "absolute" "absolute-x" "absolute-y" )

# Error out if requested test case invalid or not provided
mode="${1:-}"
found=0
for available in "${supported[@]}"
do
    if [[ "$mode" == "$available" ]]; then
        echo "INFO: Simulating $mode addressing mode."
        found=1
        break
    fi
done
if (( ! "$found" )); then
    echo "ERROR: $mode is not a supported addressing mode or test case."
    exit 1
fi

# Establish a temp location to put the result of the simulation
if [[ ! -w "$tmp_dir" || ! -r "$tmp_dir" ]]; then
    echo "ERROR: Directory $tmp_dir not readable or writable by current user."
    exit 1
elif [[ -d "$sim_dir" ]]; then
    rm -rf "$sim_dir"
fi
mkdir -pv "$sim_dir/$mode"

# Assemble the source code and generate a .coe file
source_file="$roms_dir/$mode.asm"
map_file="$roms_dir/$mode.map"
if [[ -f "$source_file" ]]; then
    "$scripts_dir/oddball" --with-map "$map_file" "$source_file"
else
    echo "ERROR: Source file $source_file not found."
    exit 1
fi

# If it does not already exist, build a behavioral model for the Xilinx
# block RAM
memory_file="$memory_dir/simulation/$memory_model"
if [[ ! -f "$memory_file" ]]; then
    echo "INFO: No behavioral model for the Block Memory Generator Core found."
    # Delete any remnants of the memory model if they exist
    if [[ -d "$memory_dir" ]]; then
        rm -rf "$memory_dir"
    fi
    echo "INFO: Generating behavioral model for Block Memory Generator Core."
    # Run the memory generator script and provide it with the name of the
    # ROM to use - for now, it assumes that it was run from the scripts
    # directory
    cd "$scripts_dir"
    "$scripts_dir/memory_gen" "$roms_dir/$mode.coe"
    cd "$sim_dir"
else
    echo "INFO: Found Block Memory Generator Core at $memory_dir."
fi

sim_file="$mode.tcl"
if [[ -f "$sim_file" ]]; then
    vsim -c -do "$sim_file"
fi
